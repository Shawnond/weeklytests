public class ServerVulnerability {
    public static int findLargestMinVulnerability(int[] server, long k) {
        int minElem = Integer.MAX_VALUE;
        for (int elem : server) {
            minElem = Math.min(minElem, elem);
        }
        long init = 0;
        for (int elem : server) {
            init += elem - minElem;
        }
        if (init >= k) {
            return minElem;
        }
        long remainingOps = k - init; // remainOps should be evenly distributed across the servers for divide by n, and determine adder 1or0
        return (int) (minElem - (remainingOps / server.length) - (remainingOps % server.length != 0 ? 1 : 0));
    }

    public static void main(String[] args) {
        int[] server = {2, 2, 3, 3};
        long k = 3;
        System.out.println(findLargestMinVulnerability(server, k)); 
        int[] server2 = {3, 4, 5};
        long k2 = 4;
        System.out.println(findLargestMinVulnerability(server2, k2)); 

        int[] server3 = {0, 0, 0};
        long k3 = 3;
        System.out.println(findLargestMinVulnerability(server3, k3));
    }
}